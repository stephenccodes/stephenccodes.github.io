[
  {
    "objectID": "blog_posts.html",
    "href": "blog_posts.html",
    "title": "Blog",
    "section": "",
    "text": "Blog post 1\n\n\n\nQuarto\n\n\nMEDS\n\n\n\nA short catchy description of the blog post\n\n\n\nStephen Carroll\n\n\nOct 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlog post 1\n\n\n\nQuarto\n\n\nMEDS\n\n\n\nA short catchy description of the blog post\n\n\n\nStephen Carroll\n\n\nOct 18, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog_posts/2024-10-18-my-first-post/index.html",
    "href": "blog_posts/2024-10-18-my-first-post/index.html",
    "title": "Blog post 1",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "blog_posts/2024-10-18-my-first-post/index.html#this-is-my-first-section",
    "href": "blog_posts/2024-10-18-my-first-post/index.html#this-is-my-first-section",
    "title": "Blog post 1",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "blog_posts/2024-10-18-my-first-post/index.html#this-is-my-second",
    "href": "blog_posts/2024-10-18-my-first-post/index.html#this-is-my-second",
    "title": "Blog post 1",
    "section": "This is my second",
    "text": "This is my second\nHere’s my next paragraph2\nI’m citing me(Csik 2022)\nHere is more random text. I’m going to cite a journal article now.(Gaynor et al. 2022)"
  },
  {
    "objectID": "blog_posts/2024-10-18-my-first-post/index.html#footnotes",
    "href": "blog_posts/2024-10-18-my-first-post/index.html#footnotes",
    "title": "Blog post 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHere is a new footnote↩︎\nHere is my second footnote↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "some text goes here"
  },
  {
    "objectID": "about.html#what-i-do-for-work",
    "href": "about.html#what-i-do-for-work",
    "title": "About",
    "section": "",
    "text": "some text goes here"
  },
  {
    "objectID": "about.html#what-i-do-for-fun",
    "href": "about.html#what-i-do-for-fun",
    "title": "About",
    "section": "What I do for fun",
    "text": "What I do for fun\n\nsome text goes here\n\nhere is some more text\n\ncenter text here"
  },
  {
    "objectID": "blog_posts/thomas-fire-analysis/thomas_fire_analysis.html",
    "href": "blog_posts/thomas-fire-analysis/thomas_fire_analysis.html",
    "title": "Blog post 1",
    "section": "",
    "text": "Author: Stephen Carroll\nThis project repository can be found at: https://github.com/stephenccodes/eds220-hwk4\n\n\n\n\nThe intent of this notebook is to analyze two components of the 2017 Thomas Fire: - use remote sensing and fire perimeter data to create a false-color map of the fire and the surrounding area. - use air quality index(AQI) data to visualize the effect the fire had on air quality in surrounding communites.\nThe map will indicate the extent of the fire scar, and highlight areas that contain vegetation or bare soil with colors that have more contrast than a true color image. The AQI dataa will be visualized using a graph and utilize XXXX. These goals will be achieved through various data analysis techniques and iterations of plots, outlined below.\n\n\n\n\nImport, clean, and manipulate a vector dataset\nClean data using pandas\nImport, clean, and manipulate an xarray dataset\nCreate a set of plots of the area in true and false-color without creating new variables\nRemove outlier values by adjusting the scale with the robust parameter.\nImport existing geo-data frame and implement it\nCreate a polished map of the false-color image, with superimposed fire perimeter\n\n\n\n\n\n\nThis data is a simplified collection of bands (red, green, blue, near-infrared, and shortwave infrared) from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. The data was retrieved from the Microsof Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nDate accessed: 11/19/24\nOriginal data source:\nhttps://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\n\n\n\nThis database contains information about spatial distribution of historic wild and prescribed fires in the state of California. The data comes with a warning that it is not comprehensive, with some records lost or damaged, fire perimeters may be missing. There may also be duplicate fires and over-generalization of fire perimeters. The database is maintained by the California Department of Forestry and Fire Protection’s Fire and Resource Assessment Program.\nDate accessed: 11/19/24\nOriginal data source:\nhttps://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\n\n\n\n\n\nU.S. Geological Survey. (n.d.). Landsat 8-9 OLI/TIRS collection 2 level-2 science products | USGS EROS Archive. U.S. Geological Survey. https://www.usgs.gov/centers/eros/science/usgs-eros-archive-landsat-archives-landsat-8-9-olitirs-collection-2-level-2 Access date: November 19, 2024.\nData.gov. (2024). California fire perimeters (ALL). Data.gov. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436 Access date: November 19, 2024.\n\nAll materials were created by Carmen Galaz-Garcia for EDS-220: Working with Environmental Data.\n\n\n\n\n\n\n\n# Import libraries\nimport os\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport rioxarray as rioxr\nimport matplotlib.pyplot as plt\n\n# Establish a file path for the landsat data\nfp = os.path.join('data/landsat8-2018-01-26-sb-simplified.nc')\n\n# Import the landsat data\nlandsat = rioxr.open_rasterio(fp)\n\n\n\n\n\n# View the data\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\n\n# Find the CRS of the landsat data\nprint('CRS', landsat.rio.crs)\n\nCRS EPSG:32611\n\n\n\n# Find the dimensions of the landsat data\nprint('Height: ', landsat.rio.height)\nprint('Width: ', landsat.rio.width)\n\nHeight:  731\nWidth:  870\n\n\n\n# Find the data type of the landsat data\nprint('Data type: \\n', landsat.dtypes)\n\nData type: \n Frozen({'red': dtype('float64'), 'green': dtype('float64'), 'blue': dtype('float64'), 'nir08': dtype('float64'), 'swir22': dtype('float64')})\n\n\n\n# Find the geographic extent of the landsat data\nprint(landsat.rio.bounds(), '\\n')\n\n(121170.0, 3755160.0, 356070.0, 3952530.0) \n\n\n\n\n\n\nTo begin, I viewed the landsat data to learn more about it. It has the variables ‘Red’, ‘Green’, ‘Blue’, ‘nir08’, and ‘swir12’. These variables represent energy bands, and the last two variables have unique names but are assumed to represent near-infrared and short wave infrared bands. I found the coordinate reference system(CRS) used and printed the height(731) and width(870) of the dataset. I listed the data types for each variable, as well as the geographic boundary of the data.\n\n\n\n\n# Remove the first dimension(band) and drop the associated coordinates\nlandsat = landsat.squeeze().drop_vars('band')\n\n\n\n\n\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Remove the exterem values caused by cloud cover and plot it again\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\n\n\n\nThe first plot displays all of the values present, including extreme values caused by clouds or other interference. These extreme values affect the color scale, with most values rendering as either black or white. The second plot is adjusted to avoid the influence of these extreme values. When you set robust = True, the only values displayed are from the 2nd to 98th percentiles, allowing the color scale to better represent the meaningful range of values.\n\n\n\n\n\n\n\n# Use SWIR, NIR, and Red wavelengths to viaulize the vegetation and burn areas better\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Read in the Thomas fire data and convert CRS to match the landsat data\nthomas_fire = gpd.read_file('data/thomas_fire/thomas_fire.shp').to_crs(landsat.rio.crs)\n\n# Confirm the change was successful\nassert landsat.rio.crs == thomas_fire.crs\n\n\n\n\n\n# Define the landsat aspect ratio\nlandsat_aspect_ratio = landsat.rio.width / landsat.rio.height \n\n# Initialize the figure and set the dimensions\nfig, ax = plt.subplots(figsize = (9, 5 * landsat_aspect_ratio)) # Apply the aspect ratio\n\n# Set the background color of the entire figure \nfig.patch.set_facecolor('beige')\n\n# Remove axes for cleaner map\nax.axis('off') \n\n# Plot the false color remorte sensing data\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True, ax = ax)\n\n# Plot the Thomas Fire perimeter\nthomas_fire.boundary.plot(ax = ax, \n                          color = \"red\", # Color it red for emphasis\n                          linewidth = 0.8)\n\n# Add a main title\nax.set_title(\"The 2017 Thomas Fire Scar\\n\", fontsize = 12)\n\n# Add subtitle describing the false colors\nfig.suptitle(\"False Colors with Short Wave Infrared, Near-Infrared, & Red Wavelengths\", \n             color = 'black', \n             fontsize = 10, \n             fontweight='light', \n             y=0.91)\n\n# Add a legend for the fire boundary\nax.legend(labels = ['Thomas Fire (2017) Scar'])\n\n# Add a footnote citation at the bottom of the figure\nfig.text(0.379, 0.1, # Position\n         'Data Source: CAL FIRE & USGS EROS Archive',\n         ha='center', # Horizontal alignment\n         va='center', # Vertical alignment\n         fontsize=8, \n         color='black', \n         fontstyle='italic')\nfig.text(0.395, 0.08, # Position \n         'Date Accessed: 11/19/24',\n         ha='right', # Horizontal alignment\n         va='center', # Vertical alignment\n         fontsize=8, \n         color='black', \n         fontstyle='italic')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nThe figure above displays the area burned during the 2017 Thomas Fire, as well as surrounding areas. The area outlined in red represents the extent of the fire perimeter. This is a false color image, with Short Wave Infrared(SWIR), Near-Infrared(NIR), and Red energy bands being visualized with Red, Green, and Blue colors, respectively.\nThe burn scar is displayed as red, because newly burned land reflects strongly in SWIR bands. The areas of the map that have vegetation are depicted by green colors, as vegetation reflect near-infrared light strongly, with healthy plants reflecting more than stressed plants. Accordingly, since the chlorophyll in plants absorbs red light, very little of the repesentative blue is displayed here."
  },
  {
    "objectID": "blog_posts/thomas-fire-analysis/thomas_fire_analysis.html#about",
    "href": "blog_posts/thomas-fire-analysis/thomas_fire_analysis.html#about",
    "title": "Blog post 1",
    "section": "",
    "text": "The intent of this notebook is to analyze two components of the 2017 Thomas Fire: - use remote sensing and fire perimeter data to create a false-color map of the fire and the surrounding area. - use air quality index(AQI) data to visualize the effect the fire had on air quality in surrounding communites.\nThe map will indicate the extent of the fire scar, and highlight areas that contain vegetation or bare soil with colors that have more contrast than a true color image. The AQI dataa will be visualized using a graph and utilize XXXX. These goals will be achieved through various data analysis techniques and iterations of plots, outlined below.\n\n\n\n\nImport, clean, and manipulate a vector dataset\nClean data using pandas\nImport, clean, and manipulate an xarray dataset\nCreate a set of plots of the area in true and false-color without creating new variables\nRemove outlier values by adjusting the scale with the robust parameter.\nImport existing geo-data frame and implement it\nCreate a polished map of the false-color image, with superimposed fire perimeter\n\n\n\n\n\n\nThis data is a simplified collection of bands (red, green, blue, near-infrared, and shortwave infrared) from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. The data was retrieved from the Microsof Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nDate accessed: 11/19/24\nOriginal data source:\nhttps://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\n\n\n\nThis database contains information about spatial distribution of historic wild and prescribed fires in the state of California. The data comes with a warning that it is not comprehensive, with some records lost or damaged, fire perimeters may be missing. There may also be duplicate fires and over-generalization of fire perimeters. The database is maintained by the California Department of Forestry and Fire Protection’s Fire and Resource Assessment Program.\nDate accessed: 11/19/24\nOriginal data source:\nhttps://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\n\n\n\n\n\nU.S. Geological Survey. (n.d.). Landsat 8-9 OLI/TIRS collection 2 level-2 science products | USGS EROS Archive. U.S. Geological Survey. https://www.usgs.gov/centers/eros/science/usgs-eros-archive-landsat-archives-landsat-8-9-olitirs-collection-2-level-2 Access date: November 19, 2024.\nData.gov. (2024). California fire perimeters (ALL). Data.gov. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436 Access date: November 19, 2024.\n\nAll materials were created by Carmen Galaz-Garcia for EDS-220: Working with Environmental Data."
  },
  {
    "objectID": "blog_posts/thomas-fire-analysis/thomas_fire_analysis.html#true-color-image",
    "href": "blog_posts/thomas-fire-analysis/thomas_fire_analysis.html#true-color-image",
    "title": "Blog post 1",
    "section": "",
    "text": "# Import libraries\nimport os\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport rioxarray as rioxr\nimport matplotlib.pyplot as plt\n\n# Establish a file path for the landsat data\nfp = os.path.join('data/landsat8-2018-01-26-sb-simplified.nc')\n\n# Import the landsat data\nlandsat = rioxr.open_rasterio(fp)\n\n\n\n\n\n# View the data\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\n\n# Find the CRS of the landsat data\nprint('CRS', landsat.rio.crs)\n\nCRS EPSG:32611\n\n\n\n# Find the dimensions of the landsat data\nprint('Height: ', landsat.rio.height)\nprint('Width: ', landsat.rio.width)\n\nHeight:  731\nWidth:  870\n\n\n\n# Find the data type of the landsat data\nprint('Data type: \\n', landsat.dtypes)\n\nData type: \n Frozen({'red': dtype('float64'), 'green': dtype('float64'), 'blue': dtype('float64'), 'nir08': dtype('float64'), 'swir22': dtype('float64')})\n\n\n\n# Find the geographic extent of the landsat data\nprint(landsat.rio.bounds(), '\\n')\n\n(121170.0, 3755160.0, 356070.0, 3952530.0) \n\n\n\n\n\n\nTo begin, I viewed the landsat data to learn more about it. It has the variables ‘Red’, ‘Green’, ‘Blue’, ‘nir08’, and ‘swir12’. These variables represent energy bands, and the last two variables have unique names but are assumed to represent near-infrared and short wave infrared bands. I found the coordinate reference system(CRS) used and printed the height(731) and width(870) of the dataset. I listed the data types for each variable, as well as the geographic boundary of the data.\n\n\n\n\n# Remove the first dimension(band) and drop the associated coordinates\nlandsat = landsat.squeeze().drop_vars('band')\n\n\n\n\n\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow()\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Remove the exterem values caused by cloud cover and plot it again\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(robust = True)\n\n\n\n\n\n\n\n\n\n\n\nThe first plot displays all of the values present, including extreme values caused by clouds or other interference. These extreme values affect the color scale, with most values rendering as either black or white. The second plot is adjusted to avoid the influence of these extreme values. When you set robust = True, the only values displayed are from the 2nd to 98th percentiles, allowing the color scale to better represent the meaningful range of values."
  },
  {
    "objectID": "blog_posts/thomas-fire-analysis/thomas_fire_analysis.html#false-color-image",
    "href": "blog_posts/thomas-fire-analysis/thomas_fire_analysis.html#false-color-image",
    "title": "Blog post 1",
    "section": "",
    "text": "# Use SWIR, NIR, and Red wavelengths to viaulize the vegetation and burn areas better\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True)"
  },
  {
    "objectID": "blog_posts/thomas-fire-analysis/thomas_fire_analysis.html#false-color-composite-map",
    "href": "blog_posts/thomas-fire-analysis/thomas_fire_analysis.html#false-color-composite-map",
    "title": "Blog post 1",
    "section": "",
    "text": "# Read in the Thomas fire data and convert CRS to match the landsat data\nthomas_fire = gpd.read_file('data/thomas_fire/thomas_fire.shp').to_crs(landsat.rio.crs)\n\n# Confirm the change was successful\nassert landsat.rio.crs == thomas_fire.crs\n\n\n\n\n\n# Define the landsat aspect ratio\nlandsat_aspect_ratio = landsat.rio.width / landsat.rio.height \n\n# Initialize the figure and set the dimensions\nfig, ax = plt.subplots(figsize = (9, 5 * landsat_aspect_ratio)) # Apply the aspect ratio\n\n# Set the background color of the entire figure \nfig.patch.set_facecolor('beige')\n\n# Remove axes for cleaner map\nax.axis('off') \n\n# Plot the false color remorte sensing data\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True, ax = ax)\n\n# Plot the Thomas Fire perimeter\nthomas_fire.boundary.plot(ax = ax, \n                          color = \"red\", # Color it red for emphasis\n                          linewidth = 0.8)\n\n# Add a main title\nax.set_title(\"The 2017 Thomas Fire Scar\\n\", fontsize = 12)\n\n# Add subtitle describing the false colors\nfig.suptitle(\"False Colors with Short Wave Infrared, Near-Infrared, & Red Wavelengths\", \n             color = 'black', \n             fontsize = 10, \n             fontweight='light', \n             y=0.91)\n\n# Add a legend for the fire boundary\nax.legend(labels = ['Thomas Fire (2017) Scar'])\n\n# Add a footnote citation at the bottom of the figure\nfig.text(0.379, 0.1, # Position\n         'Data Source: CAL FIRE & USGS EROS Archive',\n         ha='center', # Horizontal alignment\n         va='center', # Vertical alignment\n         fontsize=8, \n         color='black', \n         fontstyle='italic')\nfig.text(0.395, 0.08, # Position \n         'Date Accessed: 11/19/24',\n         ha='right', # Horizontal alignment\n         va='center', # Vertical alignment\n         fontsize=8, \n         color='black', \n         fontstyle='italic')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nThe figure above displays the area burned during the 2017 Thomas Fire, as well as surrounding areas. The area outlined in red represents the extent of the fire perimeter. This is a false color image, with Short Wave Infrared(SWIR), Near-Infrared(NIR), and Red energy bands being visualized with Red, Green, and Blue colors, respectively.\nThe burn scar is displayed as red, because newly burned land reflects strongly in SWIR bands. The areas of the map that have vegetation are depicted by green colors, as vegetation reflect near-infrared light strongly, with healthy plants reflecting more than stressed plants. Accordingly, since the chlorophyll in plants absorbs red light, very little of the repesentative blue is displayed here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stephen Carroll",
    "section": "",
    "text": "Stephen Carroll holds a Master in Environmental Data Science degree from the Bren School of Environmental Management at UC Santa Barbara. Stephen became passionate about environmental studies as an undergraduate at UC Santa Cruz, where he interned with the UC Natural Reserve System, working to restore coastal prairie habitat. After graduating with an Anthropology degree in 2014, Stephen worked in agriculture, first, at an agri-tech startup with a mission to transform local food systems through vertical hydroponic farms, and later, at an organic farm, where he served in a leadership position and developed efficient approaches to workflow and logistics with the goal of reducing waste and costly inputs. Stephen also earned a certificate in microscopy and soil science, developing expertise in the microbiological processes that underpin the distinct agricultural operations in which he has taken part. He is excited to use his skills in data analysis, statistics, and programming to deepen his knowledge of conservation, waste management, and agroecology. After graduate school, he intends to use data science to find practical solutions to universal problems."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Stephen Carroll",
    "section": "Education",
    "text": "Education\nsome text here"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Stephen Carroll",
    "section": "Experience",
    "text": "Experience\nsome text here"
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "Stephen Carroll",
    "section": "Skills",
    "text": "Skills\nsome text here"
  }
]